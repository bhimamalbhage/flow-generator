{"version":3,"sources":["Components/Header.js","Components/Playground.js","Components/Sidebar.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","display","justifyContent","Playground","props","ctx","document","getElementById","getContext","fillStyle","fillRect","font","fillText","id","onDrop","e","fnDrop","onDragOver","fnAllowDrop","width","height","class","onclick","React","Component","Sidebar","draggable","onDragStart","fnDrag","data-node","Main","ev","dataTransfer","setData","target","getAttribute","data","getData","console","log","preventDefault","name","posX","posY","con","x","y","addNodeToDrawFlow","clientX","clientY","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oQAWeA,MATf,WACI,OACI,yBAAKC,UAAU,SAASC,MAAO,CAACC,QAAQ,OAAOC,eAAe,kBAC1D,sCACA,qC,oCC6CGC,G,yDA/CX,WAAYC,GACX,uCACSA,G,gEAKN,IACIC,EADWC,SAASC,eAAe,UACpBC,WAAW,MAC7BH,EAAII,UAAY,QAChBJ,EAAIK,SAAS,IAAI,IAAK,IAAK,KAC9BL,EAAII,UAAY,OAEhBJ,EAAIM,KAAO,kBACXN,EAAIO,SAAS,OAAQ,IAAK,O,+BAanB,IAAD,OAEJ,OACI,kBAAC,WAAD,KACA,yBAAKC,GAAG,WAAWC,OAAQ,SAACC,GAAD,OAAM,EAAKX,MAAMY,OAAOD,IAAIE,WAAY,SAACF,GAAD,OAAM,EAAKX,MAAMc,YAAYH,IAAIhB,UAAU,cAE1G,4BAAQc,GAAG,SAASM,MAAM,SAASC,OAAO,UAI1C,4BAAQC,MAAM,UAAWC,QAAQ,aAAjC,6B,GAtCSC,IAAMC,YCqChBC,MAtCf,SAAiBrB,GAEb,OACI,yBAAKL,UAAU,WACX,yBAAKA,UAAU,WAAW2B,UAAU,OAAOC,YAAa,SAACZ,GAAD,OAAMX,EAAMwB,OAAOb,IAAIc,YAAU,SACrF,wCAEJ,yBAAK9B,UAAU,WAAW2B,UAAU,OAAOC,YAAa,SAACZ,GAAD,OAAMX,EAAMwB,OAAOb,IAAIc,YAAU,UACrF,yCAEJ,yBAAK9B,UAAU,WAAW2B,UAAU,OAAOC,YAAa,SAACZ,GAAKX,EAAMwB,OAAOb,IAAKc,YAAU,QACtF,uCAEJ,yBAAK9B,UAAU,WAAW2B,UAAU,OAAOC,YAAa,SAACZ,GAAKX,EAAMwB,OAAOb,IAAKc,YAAU,UACtF,yCAEJ,yBAAK9B,UAAU,WAAW2B,UAAU,OAAOC,YAAa,SAACZ,GAAKX,EAAMwB,OAAOb,IAAKc,YAAU,OACtF,sCAEJ,yBAAK9B,UAAU,WAAW2B,UAAU,OAAOC,YAAa,SAACZ,GAAKX,EAAMwB,OAAOb,IAAKc,YAAU,OACtF,sCAEJ,yBAAK9B,UAAU,WAAW2B,UAAU,OAAOC,YAAa,SAACZ,GAAKX,EAAMwB,OAAOb,IAAKc,YAAU,QACtF,uCAEJ,yBAAK9B,UAAU,WAAW2B,UAAU,OAAOC,YAAa,SAACZ,GAAKX,EAAMwB,OAAOb,IAAKc,YAAU,YACtF,2CAEJ,yBAAK9B,UAAU,WAAW2B,UAAU,OAAOC,YAAa,SAACZ,GAAKX,EAAMwB,OAAOb,IAAKc,YAAU,UACtF,2CC0BDC,MArDf,WA6CI,OACI,yBAAK/B,UAAU,WACX,kBAAC,EAAD,CAAS6B,OA9CjB,SAAcG,GACVA,EAAGC,aAAaC,QAAQ,OAAQF,EAAGG,OAAOC,aAAa,cACvD,IAAIC,EAAOL,EAAGC,aAAaK,QAAQ,QACnCC,QAAQC,IAAI,sBAAuBH,MA4C9B,kBAAC,EAAD,CAAYpB,OApCnB,SAAce,GACdA,EAAGS,iBACH,IAAIJ,EAAOL,EAAGC,aAAaK,QAAQ,QACnCC,QAAQC,IAAI,uBAAyBH,GAKvC,SAA2BK,EAAMC,EAAMC,GAE5B,gDACkBF,EADlB,wBAAP,IAIIG,EADEtC,SAASC,eAAe,UAClBC,WAAW,MAEtB8B,QAAQC,IAAI,UAAUG,GACtBJ,QAAQC,IAAI,UAAUI,GAEtBC,EAAInC,UAAY,QAChB,IAAIoC,EAAIH,EAAO,IACXI,EAAIH,EAAO,IACfL,QAAQC,IAAI,UAAUM,GACtBP,QAAQC,IAAI,UAAUO,GACtBF,EAAIlC,SAASmC,EAAEC,EAAG,IAAK,KAG1BF,EAAInC,UAAY,OAChBmC,EAAIjC,KAAO,kBACXiC,EAAIhC,SAAS6B,EAAMI,EAAE,GAAIC,EAAE,IAzB3BC,CAAkBX,EAAML,EAAGiB,QAASjB,EAAGkB,SACvCX,QAAQC,IAAIR,IA+BqBb,YAxCjC,SAAmBa,GACjBA,EAAGS,sBCMIU,MAZf,WACE,OACE,yBAAKnD,UAAU,iBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASC,eAAe,SDyHpB,kBAAmBoD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.fefcfec5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\" style={{display:\"flex\",justifyContent:\"space-between\"}}>\r\n            <h2 >Canvas</h2>\r\n            <p >Save</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { render } from '@testing-library/react';\r\nimport React, { Fragment } from 'react'\r\n\r\nclass Playground extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        var myCanvas = document.getElementById(\"canvas\");\r\n        var ctx = myCanvas.getContext(\"2d\");\r\n         ctx.fillStyle = \"white\";\r\n         ctx.fillRect(150,400, 100, 100);\r\n      ctx.fillStyle = \"grey\";\r\n\r\n      ctx.font = \"15pt sans-serif\";\r\n      ctx.fillText(\"Home\", 160, 440);  \r\n        var node = {\r\n            x:150,\r\n            y:400,\r\n            w:100,\r\n            h:100,\r\n            text: \"Home\",\r\n            fillStyle:\"white\",\r\n            strokeStyle:\"grey\"\r\n        }\r\n        // this.textfill(ctx,node);\r\n    };     \r\n\r\n    render(){\r\n\r\n        return (\r\n            <Fragment>\r\n            <div id=\"drawflow\" onDrop={(e)=> this.props.fnDrop(e)} onDragOver={(e)=> this.props.fnAllowDrop(e)} className=\"playground\" >\r\n                {/* <button onClick={()=> createRect()}>Create rectangle </button> */}\r\n                <canvas id=\"canvas\" width=\"1260px\" height=\"650px\">\r\n                \r\n                </canvas>\r\n                {/* {console.log(ctx)} */}\r\n                <button class=\"openbtn\"  onclick=\"openNav()\">â˜° Open Sidebar</button>  \r\n            </div>\r\n\r\n            </Fragment>\r\n    )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Playground\r\n","import React from 'react'\r\n\r\nfunction Sidebar(props) {\r\n  \r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"box-list\" draggable=\"true\" onDragStart={(e)=> props.fnDrag(e)} data-node=\"speak\">\r\n                <span>Speak</span>\r\n            </div>\r\n            <div className=\"box-list\" draggable=\"true\" onDragStart={(e)=> props.fnDrag(e)} data-node=\"choice\">\r\n                <span>Choice</span>\r\n            </div>\r\n            <div className=\"box-list\" draggable=\"true\" onDragStart={(e)=>{props.fnDrag(e)}} data-node=\"dtmf\">\r\n                <span>DTMF</span>\r\n            </div>\r\n            <div className=\"box-list\" draggable=\"true\" onDragStart={(e)=>{props.fnDrag(e)}} data-node=\"record\">\r\n                <span>Record</span>\r\n            </div>\r\n            <div className=\"box-list\" draggable=\"true\" onDragStart={(e)=>{props.fnDrag(e)}} data-node=\"api\">\r\n                <span>API</span>\r\n            </div>\r\n            <div className=\"box-list\" draggable=\"true\" onDragStart={(e)=>{props.fnDrag(e)}} data-node=\"sms\">\r\n                <span>SMS</span>\r\n            </div>\r\n            <div className=\"box-list\" draggable=\"true\" onDragStart={(e)=>{props.fnDrag(e)}} data-node=\"flow\">\r\n                <span>Flow</span>\r\n            </div>\r\n            <div className=\"box-list\" draggable=\"true\" onDragStart={(e)=>{props.fnDrag(e)}} data-node=\"transfer\">\r\n                <span>Transfer</span>\r\n            </div>\r\n            <div className=\"box-list\" draggable=\"true\" onDragStart={(e)=>{props.fnDrag(e)}} data-node=\"hangup\">\r\n                <span>Hangup</span>\r\n            </div>\r\n         {/* <div style={{height:\"50px\",marginTop:\"35px\"}} onDrop={(e)=> props.fnDrop(e)} onDragOver={(e)=> props.fnAllowDrop(e)}>\r\n             I am Drop\r\n         </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\nimport Playground from './Playground'\r\nimport Sidebar from './Sidebar'\r\n\r\nfunction Main() {\r\n    function drag(ev) {\r\n        ev.dataTransfer.setData(\"node\", ev.target.getAttribute('data-node'));\r\n        var data = ev.dataTransfer.getData(\"node\");\r\n        console.log(\"Dragged object is: \"+ data);  \r\n        \r\n      }\r\n\r\n      function allowDrop(ev) {\r\n        ev.preventDefault();\r\n      }\r\n\r\n      function drop(ev) {\r\n      ev.preventDefault();\r\n      var data = ev.dataTransfer.getData(\"node\");\r\n      console.log(\"Dropped object is:- \" + data);\r\n      addNodeToDrawFlow(data, ev.clientX, ev.clientY);\r\n      console.log(ev);\r\n    }\r\n\r\n    function addNodeToDrawFlow(name, posX, posY)\r\n    {\r\n        var box = `<div>\r\n        <div class=\"title-box\">${name}</div>\r\n      </div>`;\r\n      var c = document.getElementById(\"canvas\");\r\n        var con = c.getContext(\"2d\");\r\n\r\n         console.log(\"x pos: \"+posX);\r\n         console.log(\"y pos: \"+posY);\r\n         \r\n         con.fillStyle = \"white\";\r\n         let x = posX - 180;\r\n         let y = posY - 100;\r\n         console.log(\"x pos: \"+x);\r\n         console.log(\"y pos: \"+y);\r\n         con.fillRect(x,y, 100, 100);\r\n         \r\n        //  draw font in red\r\n      con.fillStyle = \"grey\";\r\n      con.font = \"20pt sans-serif\";\r\n      con.fillText(name, x+20, y+30); \r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Sidebar fnDrag = {drag}/>\r\n             <Playground fnDrop={drop} fnAllowDrop = {allowDrop}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header'\nimport Main from './Components/Main';\nimport Playground from './Components/Playground';\nimport Sidebar from './Components/Sidebar';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Header />\n      <Main />\n      {/* <div className=\"wrapper\">\n      <Sidebar />\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}